generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                 @id @default(autoincrement())
  name                String
  email               String              @unique
  emailVerified       DateTime?
  password            String
  phone               String
  bio                 String?
  image               String?
  year                String
  role                Role                @default(USER)
  memberSince         DateTime?
  position            String?
  totalActivityPoints Int                 @default(0)
  branchId            String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  Attendance          Attendance[]
  Certificate         Certificate[]
  Organiser           Organiser[]
  Payment             Payment[]
  QuizResponse        QuizResponse[]
  RefreshToken        RefreshToken[]
  Branch              Branch              @relation(fields: [branchId], references: [id])
  UserFeedback        UserFeedback[]
  UserLink            UserLink[]
  VerificationToken   VerificationToken[]
  ActivityPoint       ActivityPoint[]     @relation("ActivityPointToUser")
  Team                Team[]              @relation("TeamToUser")
  Blog                Blog[]
}

model VerificationToken {
  id        String           @id @unique @default(cuid())
  revoked   Boolean          @default(false)
  type      VerificationType @default(EMAIL_VERIFICATION)
  userId    Int
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  User      User             @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id          String   @id @unique
  hashedToken String
  revoked     Boolean  @default(false)
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id])

  @@unique([id, hashedToken])
}

model UserLink {
  id        String   @id @default(cuid())
  linkName  String
  url       String
  userId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
}

model Branch {
  id        String   @id @default(cuid())
  nickName  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model ActivityPoint {
  id        String   @id @default(cuid())
  point     Int
  name      String?  @default("Event")
  eventId   Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Event     Event?   @relation(fields: [eventId], references: [id])
  User      User[]   @relation("ActivityPointToUser")
}

model Event {
  id               Int                @id @default(autoincrement())
  name             String
  imgSrc           String?
  description      String?
  venue            String?
  eventType        EventType
  category         EventCategory
  fromDate         DateTime
  toDate           DateTime
  deadline         DateTime?
  maxTeams         Int                @default(0)
  minTeamSize      Int                @default(1)
  maxTeamSize      Int                @default(1)
  amount           Int                @default(0)
  state            EventState         @default(DRAFT)
  isLegacy         Boolean            @default(false)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  ActivityPoint    ActivityPoint[]
  Attendance       Attendance[]
  Certificate      Certificate[]
  FeedbackTemplate FeedbackTemplate[]
  Organiser        Organiser[]
  Team             Team[]
  Winner           Winner[]
}

model Organiser {
  id        String   @id @default(cuid())
  userId    Int
  eventId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Event     Event    @relation(fields: [eventId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, eventId])
  @@index([userId, eventId])
}

model Team {
  id          Int      @id @default(autoincrement())
  name        String
  isConfirmed Boolean  @default(false)
  hasAttended Boolean  @default(false)
  eventId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Event       Event    @relation(fields: [eventId], references: [id])
  Winner      Winner?
  Members     User[]   @relation("TeamToUser")
}

model Attendance {
  id          String   @id @default(cuid())
  hasAttended Boolean  @default(false)
  userId      Int
  eventId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Event       Event    @relation(fields: [eventId], references: [id])
  User        User     @relation(fields: [userId], references: [id])

  @@unique([userId, eventId])
  @@index([userId, eventId])
}

model Winner {
  id         String     @id @default(cuid())
  winnerType WinnerType
  eventId    Int
  teamId     Int        @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  Event      Event      @relation(fields: [eventId], references: [id])
  Team       Team       @relation(fields: [teamId], references: [id])

  @@unique([eventId, teamId])
  @@index([eventId, teamId])
}

model Certificate {
  id              String          @id @default(cuid())
  issuedOn        DateTime
  certificateType CertificateType
  userId          Int
  eventId         Int
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  Event           Event           @relation(fields: [eventId], references: [id])
  User            User            @relation(fields: [userId], references: [id])

  @@unique([eventId, userId])
  @@index([userId, eventId])
}

model FeedbackTemplate {
  id            String                @id @default(cuid())
  templateState FeedbackTemplateState @default(DRAFT)
  eventId       Int
  Questions     String[]
  AnswersType   AnswerType[]
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  Event         Event                 @relation(fields: [eventId], references: [id])
  UserFeedback  UserFeedback[]
}

model UserFeedback {
  userId             Int
  feedbackTemplateId String
  Answers            String[]
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  FeedbackTemplate   FeedbackTemplate @relation(fields: [feedbackTemplateId], references: [id])
  User               User             @relation(fields: [userId], references: [id])

  @@id([userId, feedbackTemplateId])
  @@unique([userId, feedbackTemplateId])
  @@index([userId, feedbackTemplateId])
}

model Payment {
  id                String   @id @default(cuid())
  paymentName       String
  razorpayPaymentId String
  razorpayOrderId   String
  razorpaySignature String
  userId            Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  User              User     @relation(fields: [userId], references: [id])

  @@unique([userId, razorpayPaymentId])
}

model Quiz {
  id        String         @id @default(cuid())
  title     String
  timeLimit Int
  state     QuizState      @default(DRAFT)
  questions Json
  maxScore  Int            @default(0)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  Responses QuizResponse[]
}

model QuizResponse {
  id         String @id @default(cuid())
  answers    Json
  totalScore Int    @default(0)

  userId Int
  User   User @relation(fields: [userId], references: [id])

  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

//galary

model GalleryImage {
  id     String @id @default(uuid())
  imgSrc String
  title  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

//
model Blog {
  id String @id @unique @default(cuid())

  title        String
  content      String?
  images       Json?
  status       BlogStatus @default(DRAFT)

  userId Int
  User   User? @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  MEMBER
  CORE
  ADMIN
}

enum EventType {
  SOLO
  TEAM
}

enum EventCategory {
  WORKSHOP
  COMPETITION
  HACKATHON
  SPECIAL
}

enum EventState {
  DRAFT
  PUBLISHED
  COMPLETED
}

enum WinnerType {
  WINNER
  RUNNER_UP
  SECOND_RUNNER_UP
}

enum CertificateType {
  WINNER
  RUNNER_UP
  SECOND_RUNNER_UP
  PARTICIPATION
}

enum AnswerType {
  BOOLEAN
  RATING
  COMMENT
}

enum FeedbackTemplateState {
  DRAFT
  PUBLISHED
}

enum VerificationType {
  PASSWORD_RESET
  EMAIL_VERIFICATION
}

enum QuizState {
  DRAFT
  PUBLISHED
  LIVE
  COMPLETED
}

enum BlogStatus {
  DRAFT
  PUBLISHED
}
