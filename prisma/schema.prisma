generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model WebsiteSettings {
  id String @id @default(cuid())

  gallery Json[] // galleryZ
  about   String
  contact String
}

model User {
  id    Int    @id @default(autoincrement())
  name  String
  email String @unique

  emailVerified DateTime?
  password      String

  phone String
  image String?
  year  String
  role  Role    @default(USER)

  bio                 String?
  position            String?
  memberSince         DateTime?
  totalActivityPoints Int       @default(0)

  reasonToJoin String?
  expectations String?
  contribution String?

  branchId String
  Branch   Branch @relation(fields: [branchId], references: [id])

  UserLink UserLink[]
  Blog     Blog[]
  Payment  Payment[]

  Attendance Attendance[]
  Team       Team[]
  Organiser  Organiser[]

  ActivityPoint ActivityPoint[]
  Certificate   Certificate[]

  QuizResponse     QuizResponse[]
  FeedbackResponse FeedbackResponse[]

  RefreshToken      RefreshToken[]
  VerificationToken VerificationToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String           @id @unique @default(cuid())
  revoked Boolean          @default(false)
  type    VerificationType @default(EMAIL_VERIFICATION)

  userId Int
  User   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RefreshToken {
  id          String  @id @unique
  hashedToken String
  revoked     Boolean @default(false)

  userId Int
  User   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, hashedToken])
}

model UserLink {
  id       String @id @default(cuid())
  linkName String
  url      String

  userId Int?
  User   User? @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Branch {
  id       String @id @default(cuid())
  nickName String
  name     String

  User User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ActivityPoint {
  id    String  @id @default(cuid())
  point Int
  name  String? @default("Event")

  eventId Int?
  Event   Event? @relation(fields: [eventId], references: [id])
  User    User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id          Int     @id @default(autoincrement())
  name        String
  imgSrc      String?
  description String?
  venue       String?

  eventType EventType
  category  EventCategory

  fromDate    DateTime
  toDate      DateTime
  deadline    DateTime?
  maxTeams    Int       @default(0)
  minTeamSize Int       @default(1)
  maxTeamSize Int       @default(1)
  amount      Int       @default(0)

  state    EventState @default(DRAFT)
  isLegacy Boolean    @default(false)

  ActivityPoint ActivityPoint[]
  Organiser     Organiser[]

  Team       Team[]
  Attendance Attendance[]
  Winner     Winner[]

  Certificate Certificate[]
  Feedback    Feedback[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organiser {
  id String @id @default(cuid())

  eventId Int
  Event   Event @relation(fields: [eventId], references: [id])

  userId Int
  User   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, eventId])
  @@index([userId, eventId])
}

model Team {
  id          Int     @id @default(autoincrement())
  name        String
  isConfirmed Boolean @default(false)
  hasAttended Boolean @default(false)

  eventId Int
  Event   Event @relation(fields: [eventId], references: [id])

  Members User[]
  Winner  Winner?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendance {
  id          String  @id @default(cuid())
  hasAttended Boolean @default(false)

  eventId Int
  Event   Event @relation(fields: [eventId], references: [id])

  userId Int
  User   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, eventId])
  @@index([userId, eventId])
}

model Winner {
  id         String     @id @default(cuid())
  winnerType WinnerType

  eventId Int
  Event   Event @relation(fields: [eventId], references: [id])

  teamId Int  @unique
  Team   Team @relation(fields: [teamId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([eventId, teamId])
  @@index([eventId, teamId])
}

model Certificate {
  id              String          @id @default(cuid())
  issuedOn        DateTime
  certificateType CertificateType

  eventId Int
  Event   Event @relation(fields: [eventId], references: [id])

  userId Int
  User   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([eventId, userId])
  @@index([userId, eventId])
}

model Payment {
  id                String @id @default(cuid())
  paymentName       String
  razorpayPaymentId String
  razorpayOrderId   String
  razorpaySignature String

  userId Int
  User   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, razorpayPaymentId])
}

model Quiz {
  id        String    @id @default(cuid())
  title     String
  quizState QuizState @default(DRAFT)
  timeLimit Int
  maxPoints Int

  questions Json[] //quizQuestionZ

  QuizResponse QuizResponse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuizResponse {
  id    String @id @default(cuid())
  score Int    @default(0)

  answers Json[] //quizAnswerZ

  userId Int
  User   User @relation(fields: [userId], references: [id])

  quizId String
  Quiz   Quiz   @relation(fields: [quizId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, quizId])
  @@index([userId, quizId])
}

model Feedback {
  id            String        @id @default(cuid())
  title         String
  feedbackState FeedbackState @default(DRAFT)

  questions Json[] //feedbackQuestionZ

  eventId Int
  Event   Event @relation(fields: [eventId], references: [id])

  FeedbackResponse FeedbackResponse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FeedbackResponse {
  id String @id @default(cuid())

  answers Json[] //feedbackAnswerZ

  userId Int
  User   User @relation(fields: [userId], references: [id])

  feedbackId String
  Feedback   Feedback @relation(fields: [feedbackId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, feedbackId])
  @@index([userId, feedbackId])
}

model Blog {
  id String @id @unique @default(cuid())

  title       String
  discription String
  content     String
  readTime    Int
  words       Int
  images      Json[] // blogImagesZ
  blogState   BlogState @default(DRAFT)

  userId Int
  User   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// enums
enum Role {
  USER
  MEMBER
  ORGANISER
  CORE
  ADMIN
}

enum EventCategory {
  WORKSHOP
  COMPETITION
  HACKATHON
  SPECIAL
}

// type enums
enum EventType {
  SOLO
  TEAM
}

enum WinnerType {
  WINNER
  RUNNER_UP
  SECOND_RUNNER_UP
}

enum CertificateType {
  WINNER
  RUNNER_UP
  SECOND_RUNNER_UP
  PARTICIPATION
}

enum VerificationType {
  PASSWORD_RESET
  EMAIL_VERIFICATION
}

// state enums
enum EventState {
  DRAFT
  PUBLISHED
  LIVE
  COMPLETED
}

enum FeedbackState {
  DRAFT
  PUBLISHED
  LIVE
  COMPLETED
}

enum QuizState {
  DRAFT
  PUBLISHED
  LIVE
  COMPLETED
}

enum BlogState {
  DRAFT
  PUBLISHED
}
